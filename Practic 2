#include <chrono>
#include <iostream>
using namespace std;
using namespace chrono;

int arr[100];

short int menu() // меню, выбор задания
{
	setlocale(LC_ALL, "Russian");
	short int i;
	cout << "Задания: \n";
	cout << "1) Создает целочисленный массив размерности N = 100. Элементы массивы должны принимать случайное значение в диапазоне от - 99 до 99\n";
	cout << "2) Отсортировать заданный в пункте 1 элементы массива […] сортировкой (от меньшего к большему). Определить время, затраченное на сортировку, используя библиотеку chrono.\n";
	cout << "3) Найти максимальный и минимальный элемент массива. Подсчитайте время поиска этих элементов в отсортированном массиве и неотсортированном, используя библиотеку chrono.\n";
	cout << "4) Выводит среднее значение (если необходимо, число нужно округлить) максимального и минимального значения. Выводит индексы всех элементов, которые равны этому значению, и их количество.\n";
	cout << "5) Выводит количество элементов в отсортированном массиве, которые меньше числа a, которое инициализируется пользователем.\n";
	cout << "6) Выводит количество элементов в отсортированном массиве, которые больше числа b, которое инициализируется пользователем.\n";
	cout << "7) Выводит информацию о том, есть ли введенное пользователем число в отсортированном массиве. Реализуйте алгоритм бинарного поиска. Сравните скорость его работы с обычным перебором. (*)\n";
	cout << "8) Меняет местами элементы массива, индексы которых вводит пользователь. Выведите скорость обмена, используя библиотеку chrono.\n";
	cout << "9) Дополнительное задание. \n";
	cout << "10) Выход\n" << endl;
	cout << "Введите номер задания: ";

	while (1)
	{
		cin >> i;
		if ((i > 0) & (i < 10))
			break;
		else
			cout << "Неверно введенные данные\n";
	}
	cout << "\n";
	return i;
}

void mass() // вывод массива
{
	for (int i = 0; i < 100; i++) {
		cout << '[' << i << ']' << arr[i] << " ";
	}
	cout << endl;
}

void number_one() // Задание 1. Заполнение массива случайными числами от -99 до 99
{
	for (int i = 0; i < 100; i++) {
		arr[i] = rand() % 199 - 99;
	}
}

void number_two() // Задание 2. Сортировка массива пузырьком
{
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 99; j++)
		{
			if (arr[j] > arr[j + 1])
				swap(arr[j], arr[j + 1]);
		}
	}
}

void time() // Задание 2. Время сортировки массива пузырьком
{
	system_clock::time_point start = system_clock::now();
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 99; j++)
		{
			if (arr[j] > arr[j + 1])
				swap(arr[j], arr[j + 1]);
		}
	}
	system_clock::time_point end = system_clock::now();
	duration<double> sort = end - start;

	cout << "Время сортировки: " << std::fixed << sort.count() << "сек" << endl;
}

void number_three_unsort() // Задание 3. Максимальный и минимальный элементы неотсортированного массива. Время работы
{
	auto startMaxMinUnsort = system_clock::now();
	
	number_one();
	mass();
	int min = 100, max = -100;
	for (int i = 0; i < 100; i++)
	{
		if (arr[i] < min) min = arr[i];
		if (arr[i] > max) max = arr[i];
	}
	auto endMaxMinUnsort = system_clock::now();
	duration<double> sortMaxMinUnsort = endMaxMinUnsort - startMaxMinUnsort;

	cout << std::fixed << "Время поиска максимального и минимального элементов в неотсортированном массиве: " << sortMaxMinUnsort.count() << "сек" << endl;
	cout << "Максимальный элемент: " << max << endl;
	cout << "Минимальный элемент" << min << "\n\n";
}

void number_three_sort() // Задание 3. Максимальный и минимальный элементы в отсортированном массиве
{
	auto startMaxMinSort = system_clock::now();
	
	number_one();
	mass();
	number_two();
	

	int min = 100, max = -100;
	for (int i = 0; i < 100; i++)
	{
		if (arr[i] < min) min = arr[i];
		if (arr[i] > max) max = arr[i];
	}
	system_clock::time_point endMaxMinSort = system_clock::now();
	duration<double> sortMaxMin = endMaxMinSort - startMaxMinSort;

	cout << "Время поиска максимального и минимального элементов в отсортированном массиве: " << std::fixed << sortMaxMin.count() << "сек" << endl;
	cout << "Максимальный элемент: " << max << endl;
	cout << "Минимальный элемент" << min << endl;
}


void number_four() // Задание 4. Среднее значение минимального и максимального элементов. Кол-во элементов массива, равных среднему значению и их индекс
{
	number_one();

	int min = 100, max = -100, average;
	for (int i = 0; i < 100; i++) // поиск минимального и максимального значений
	{
		if (arr[i] < min) min = arr[i];
		if (arr[i] > max) max = arr[i];
	}
	average = (min + max) / 2; // поиск среднего значения

	cout << "Максимальный элемент: " << max << endl;
	cout << "Минимальный элемент" << min << endl;
	cout << "Среднее значение максимального и минимального элементов массива = " << average << endl;

	int count = 0;

	for (int i = 0; i < 100; i++) // индекс среднего значения
	{
		if (arr[i] == average)
		{
			cout << "[" << i << "]" << arr[i] << endl;
			count += 1;
		}
	}
	if (count == 0)
		cout << "В массиве нет элементов, равных среднему значению" << endl;

	else if (count == 1)
		cout << "Найден один элемент, равный среднему значению" << endl;
	else if (count == 2 || count == 3 || count == 4) cout << "Найдено " << count << " элемента, равных среднему значению" << endl;
	else cout << "Найдено" << count << "элементов, равных среднему значению" << endl;
}

void number_five() // Задание 5. Количество элементов массива, меньше введенного числа
{
	number_one();
	number_two();
	mass();

	int a, z=0;
	cout << "Введите число a: ";
	cin >> a;
		for (int i = 0; i < 100; i++)
		{
			if (arr[i] < a) z++;
		}
		cout << "Количество элементов массива, меньше введенного числа: " << z << endl;
}

void number_six() // Задание 6. Количество элементов массива, больше введенного числа
{
	number_one();
	number_two();
	mass();

	int b, x = 0;
	cout << "Введите число b: ";
	cin >> b;
	for (int i = 0; i < 100; i++)
	{
		if (arr[i] > b) x++;
	}
	cout << "Количество элементов массива, больше введенного числа: " << x << endl;
}

void number_seven() // Задание 7. Бинарный поиск
{
	number_one();
	number_two();
	mass();
	int bin, min = 0, max = 100, mid;
	bool key = false;
	cout << "Введите искомое число: ";
	cin >> bin;

	system_clock::time_point start1 = system_clock::now();

	while (min <= max) // бинарный поиск
	{
		mid = (min + max) / 2;
		if (arr[mid] == bin) break;
		if (arr[mid] < bin) min = mid + 1;
		if (arr[mid] > bin) max = mid - 1;
	}
	if (arr[mid] == bin) {
		cout << "Введенный элемент есть в массиве, индекс: " << mid << endl;
	}
	else {
			cout << "Введенного элемента в массиве нет" << endl;
	}
	system_clock::time_point end1 = system_clock::now();
	duration<double> sort1 = end1 - start1;

	system_clock::time_point start2 = system_clock::now();
	for (int i = 0; i < 100; i++) { // поиск перебором
		if (arr[i] == bin) {
			key = true;
		}
	}
	system_clock::time_point end2 = system_clock::now();
	duration<double> sort2 = end2 - start2;

	cout << fixed << "Разница между Бинарным поиском и перебором " << sort1.count() - sort2.count() << " секунд" << "\n";
	cout << "\n";
}

void number_eight() // Задание 8. Меняет местами элементы массива, индексы которых вводит пользователь
{
	int one, two;
	cout << "Введите индексы элементов массива, которые вы хотите поменять местами: ";
	cin >> one >> two;
	
	number_one();
	mass();

	system_clock::time_point start = system_clock::now();

	swap(arr[one], arr[two]);

	system_clock::time_point end = system_clock::now();
	duration<double> sort = end - start;

	cout << "Скорость обмена = " << std::fixed << sort.count() << " сек" << endl;

	mass();
}

void dop() // Дополнительное задание №9. 
{
	cout << "Уменьшите каждый нечетный элемент на значение, введенное пользователем\n\n";
	int red;
	cout << "Введите число, на которое хотите уменьшить все нечетные элементы массива: ";
	cin >> red;

	number_one();
	mass();
	cout << endl;

	for (int i = 0; i < 100; i++)
	{
		if (arr[i] % 2 != 0)
			arr[i] = arr[i] - red;
	}

	mass();

	cout << endl << " Каждый нечетный элемент умножьте на случайную величину в диапазоне от 1 до 9\n\n";

	number_one();
	mass();
	cout << endl;

	int inc = 1 + (rand() % 9);
	cout << "Случайное число от 1 до 9 = " << inc << "\n\n";
	for (int i = 0; i < 100; i++)
	{
		if (arr[i] % 2 != 0)
			arr[i] = arr[i] * inc;
	}

	mass();

	cout << "\nВыведите количество элементов, которые нацело делятся на 1,2,3,4,5,6,7,8,9\n\n";
	int summ1(0), summ2(0),summ3(0),summ4(0),summ5(0),summ6(0),summ7(0),summ8(0),summ9(0);
	number_one();
	mass();
	cout << endl;

	for (int i = 0; i < 100; i++)
	{
		if (arr[i] % 1 == 0)
			summ1++;
		if (arr[i] % 2 == 0)
			summ2++;
		if (arr[i] % 3 == 0)
			summ3++;
		if (arr[i] % 4 == 0)
			summ4++;
		if (arr[i] % 5 == 0)
			summ5++;
		if (arr[i] % 6 == 0)
			summ6++;
		if (arr[i] % 7 == 0)
			summ7++;
		if (arr[i] % 8 == 0)
			summ8++;
		if (arr[i] % 9 == 0)
			summ9++;
	}
	cout << "На число 1 делится " << summ1 << " элементов\n";
	cout << "На число 2 делится " << summ2 << " элементов\n";
	cout << "На число 3 делится " << summ3 << " элементов\n";
	cout << "На число 4 делится " << summ4 << " элементов\n";
	cout << "На число 5 делится " << summ5 << " элементов\n";
	cout << "На число 6 делится " << summ6 << " элементов\n";
	cout << "На число 7 делится " << summ7 << " элементов\n";
	cout << "На число 8 делится " << summ8 << " элементов\n";
	cout << "На число 9 делится " << summ9 << " элементов\n";

}


int main() // меню
{
	setlocale(LC_ALL, "Russian");
	short int choose_menu, exit = 0;

	while (1)
	{
		choose_menu = menu();
		switch (choose_menu)
		{
		case 1:
			number_one(); mass();
			break;
		case 2:
			number_one(); time(); mass();
			break;
		case 3:
			number_three_unsort(); number_three_sort();
			break;
		case 4:
			number_four(); mass();
			break;
		case 5:
			number_five();
			break;
		case 6:
			number_six();
			break;
		case 7:
			number_seven();
			break;
		case 8:
			number_eight();
			break;
		case 9:
			dop();
			break;
		case 10: return 0;
			break;

		}
		cout << endl;
	}
}
